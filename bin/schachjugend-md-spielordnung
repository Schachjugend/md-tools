#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const util = require('util')
const stream = require('stream')
const program = require('commander')
const fn = require('../lib/util')

program
  .command('html <markdown>')
  .description('publish as HTML')
  .option('-h, --scaffold [file]', 'HTML scaffold file')
  .option('-p, --plain', 'generate plain table, without HTML scaffold')
  .option('--commit-md <hash>', 'commit hash of Markdown source file')
  .option('--commit-creator <hash>', 'commit hash of md-tools')
  .action(publishHtml)

program
  .command('pdf <file> <outputPath>')
  .description('publish as PDF from a given HTML or Markdown file')
  .option('--dir <dir>', 'tmp dir used if Markdown file provided')
  .option('--date <date>', 'creation date', null, fn.dateString)
  .option('--generated <date>', 'generation date', fn.dateString(), fn.dateString)
  .option('--commit-md <hash>', 'commit hash of Markdown source file')
  .option('--commit-creator <hash>', 'commit hash of md-tools')
  .action(publishPdf)

program
  .command('all <markdown> <dir>')
  .description('publish as HTML and PDF in <dir> from a given Markdown file')
  .option('--date <date>', 'creation date', null, fn.dateString)
  .option('--generated <date>', 'generation date', fn.dateString(), fn.dateString)
  .option('--commit-md <hash>', 'commit hash of Markdown source file')
  .option('--commit-creator <hash>', 'commit hash of md-tools')
  .action(publishAll)

program.parse(process.argv)

function publishHtml (mdFile, options, outputStream) {
  const spielordnung2html = require('../lib/spielordnung/html/index')
  outputStream = outputStream || process.stdout

  fs.createReadStream(mdFile)
    .pipe(spielordnung2html(options))
    .pipe(outputStream)
}

function publishPdf (file, outputPath, options) {
  const spielordnung2pdf = require('../lib/spielordnung/pdf/index')
  spielordnung2pdf(file, outputPath, options)
}

async function publishAll (input, dir, options) {
  options.dir = dir

  console.log("Publishing both html and pdf")

  const extension = path.extname(input)
  const basename = path.basename(input, extension)
  const htmlFile = path.join(options.dir, basename + '.html')
  const pdfFile = path.join(options.dir, basename + '.pdf')

  console.log(`extension set to ${extension}`)
  console.log(`basename set to ${basename}`)
  console.log(`htmlFile set to ${htmlFile}`)
  console.log(`pdfFile set to ${pdfFile}`)

  const spielordnung2html = require('../lib/spielordnung/html/index')
  const pipeline = util.promisify(stream.pipeline)
  await pipeline(
    fs.createReadStream(input),
    spielordnung2html(options),
    fs.createWriteStream(htmlFile)
  )

  const spielordnung2pdf = require('../lib/spielordnung/pdf/index')
  await spielordnung2pdf(htmlFile, pdfFile, options)
}
